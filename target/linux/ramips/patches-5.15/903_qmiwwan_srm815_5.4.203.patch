--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -45,6 +45,38 @@
  * commands on a serial interface
  */
 
+#if 0
+ //Added by zhangqingyun@meigsmart.com always need if not dhcp can't get ip address
+struct sk_buff* qmi_wwan_tx_fixup(struct usbnet* dev, struct sk_buff* skb, gfp_t flags)
+{
+	if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) {
+		dev_err(&dev->intf->dev, "zhangqingyun test 1");
+		return skb;
+	}
+
+	if (dev->udev->descriptor.idVendor != cpu_to_le16(0x05c6)) {
+		dev_err(&dev->intf->dev, "zhangqingyun test 2");
+		return skb;
+	}
+	if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2dee)) {
+		dev_err(&dev->intf->dev, "zhangqingyun test 3");
+		return skb;
+	}
+	// Skip Ethernet header from message
+	if (skb_pull(skb, ETH_HLEN)) {
+		dev_err(&dev->intf->dev, "zhangqingyu test 4");
+		return skb;
+	}
+	else {
+		dev_err(&dev->intf->dev, "Packet Dropped ");
+	}
+
+	// Filter the packet out, release it
+	dev_kfree_skb_any(skb);
+	return NULL;
+}
+#endif
+
 /* driver specific data */
 struct qmi_wwan_state {
 	struct usb_driver *subdriver;
@@ -801,6 +833,22 @@
 	}
 	dev->net->netdev_ops = &qmi_wwan_netdev_ops;
 	dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
+#if 1 //Added by zhangqingyun@meigsmart.com
+	if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C) ||
+		dev->udev->descriptor.idVendor == cpu_to_le16(0x05c6) ||
+		dev->udev->descriptor.idVendor == cpu_to_le16(0x2dee)) {
+		dev_info(&intf->dev, "MeigSmart slm750 slm730 srm815 work on RawIP mode\n");
+		dev->net->flags |= IFF_NOARP;
+		/* make MAC addr easily distinguishable from an IP header */
+		usb_control_msg(interface_to_usbdev(intf),
+			usb_sndctrlpipe(interface_to_usbdev(intf), 0),
+			0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE
+			0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE
+			1, //active CDC DTR
+			intf->cur_altsetting->desc.bInterfaceNumber,
+			NULL, 0, 100);
+	}
+#endif	
 err:
 	return status;
 }
@@ -892,6 +940,9 @@
 	.unbind		= qmi_wwan_unbind,
 	.manage_power	= qmi_wwan_manage_power,
 	.rx_fixup       = qmi_wwan_rx_fixup,
+#if 0 //Added by zhangqingyun@meigsmart.com
+	.tx_fixup = qmi_wwan_tx_fixup,
+#endif
 };
 
 static const struct driver_info	qmi_wwan_info_quirk_dtr = {
@@ -902,6 +953,9 @@
 	.manage_power	= qmi_wwan_manage_power,
 	.rx_fixup       = qmi_wwan_rx_fixup,
 	.data           = QMI_WWAN_QUIRK_DTR,
+#if 0 //Added by zhangqingyun@meigsmart.com
+	.tx_fixup = qmi_wwan_tx_fixup,
+#endif
 };
 
 #define HUAWEI_VENDOR_ID	0x12D1
@@ -938,6 +992,21 @@
 	.driver_info = (unsigned long)&qmi_wwan_info_quirk_dtr
 
 static const struct usb_device_id products[] = {
+#if 1 //Added by Quectel
+#ifndef QMI_FIXED_INTF
+/* map QMI/wwan function by a fixed interface number */
+#define QMI_FIXED_INTF(vend, prod, num) \
+		.match_flags = USB_DEVICE_ID_MATCH_DEVICE | USB_DEVICE_ID_MATCH_INT_INFO, \
+		.idVendor = vend, \
+		.idProduct = prod, \
+		.bInterfaceClass = 0xff, \
+		.bInterfaceSubClass = 0xff, \
+		.bInterfaceProtocol = 0xff, \
+		.driver_info = (unsigned long)&qmi_wwan_force_int##num,
+#endif
+	{ QMI_FIXED_INTF(0x05c6, 0xf601, 5) }, /* MeigLink SLM750 SLM730 SLM750VR2.0*/
+        { QMI_FIXED_INTF(0x2dee, 0x4d22, 5) }, /*MeigLink SRM815*/
+#endif
 	/* 1. CDC ECM like devices match on the control interface */
 	{	/* Huawei E392, E398 and possibly others sharing both device id and more... */
 		USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, USB_CLASS_VENDOR_SPEC, 1, 9),
@@ -1445,6 +1514,19 @@
 	return false;
 }
 
+static bool MeiGe_SRM815_detected(struct usb_interface *intf)
+{
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	if (dev->actconfig &&
+	    le16_to_cpu(dev->descriptor.idVendor) == 0x2dee &&
+	    le16_to_cpu(dev->descriptor.idProduct) == 0x4d22 &&
+	    dev->actconfig->desc.bNumInterfaces == 5)
+		return true;
+
+	return false;
+}
+
 static int qmi_wwan_probe(struct usb_interface *intf,
 			  const struct usb_device_id *prod)
 {
@@ -1479,6 +1561,11 @@
 		return -ENODEV;
 	}
 
+	/* SRM815 quirk where we've QMI on interface 5 instead of 0 */
+	if (MeiGe_SRM815_detected(intf) && desc->bInterfaceNumber == 0) {
+		dev_dbg(&intf->dev, "MeiGe SRM815 quirk, skipping interface 0\n");
+		return -ENODEV;
+	}
 	/* Several Quectel modems supports dynamic interface configuration, so
 	 * we need to match on class/subclass/protocol. These values are
 	 * identical for the diagnostic- and QMI-interface, but bNumEndpoints is
